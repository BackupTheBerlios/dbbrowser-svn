/* The following code was generated by JFlex 1.4.1 on 11/16/06 1:21 AM */

package us.pcsw.dbbrowser.swing.text.lexers;

import java.util.HashMap;
import java.util.Map;

import javax.swing.text.Style;
import javax.swing.text.StyleConstants;

import us.pcsw.dbbrowser.swing.text.Lexer;
import us.pcsw.dbbrowser.swing.text.StyleImpl;

import java.awt.Color;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 11/16/06 1:21 AM from the specification file
 * <tt>flexfiles/sql.flex</tt>
 */
public class SqlLexer implements Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 128;

  /** lexical states */
  public static final int String = 1;
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\0\1\16\1\0\1\0\1\15\22\0\1\31\1\0\1\20"+
    "\4\0\1\22\1\51\1\51\1\0\1\10\1\0\1\17\1\6\1\0"+
    "\1\1\11\2\7\0\3\11\1\13\1\14\1\13\5\11\1\12\16\11"+
    "\1\0\1\21\4\0\1\26\1\23\1\35\1\5\1\7\1\4\1\32"+
    "\1\40\1\24\1\34\1\50\1\3\1\42\1\25\1\33\1\44\1\0"+
    "\1\27\1\41\1\36\1\43\1\37\1\45\1\47\1\30\1\46\105\0"+
    "\27\11\1\0\7\11\41\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11\2\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\2\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\2\11\1\0\1\11\1\0\1\11\3\0\2\11\1\0"+
    "\1\11\1\0\2\11\1\0\3\11\2\0\4\11\1\0\2\11\1\0"+
    "\3\11\3\0\2\11\1\0\2\11\1\0\1\11\1\0\1\11\1\0"+
    "\2\11\1\0\1\11\2\0\1\11\1\0\2\11\1\0\3\11\1\0"+
    "\1\11\1\0\2\11\3\0\1\11\7\0\1\11\2\0\1\11\2\0"+
    "\1\11\2\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\2\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\2\0\1\11\2\0\1\11\1\0"+
    "\3\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11\u0153\0"+
    "\1\11\1\0\3\11\1\0\1\11\1\0\2\11\1\0\21\11\1\0"+
    "\11\11\46\0\3\11\3\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\5\0\1\11\2\0"+
    "\1\11\1\0\2\11\5\0\60\11\60\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11\11\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\2\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\2\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\3\0\1\11\7\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\42\0\46\11\u0b49\0\46\11\u0d3a\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\13\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\17\0\10\11\10\0"+
    "\6\11\12\0\10\11\10\0\10\11\10\0\6\11\13\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\10\0\10\11\110\0\4\11\14\0"+
    "\4\11\14\0\4\11\14\0\5\11\13\0\4\11\u0106\0\1\11\4\0"+
    "\1\11\3\0\3\11\2\0\3\11\2\0\1\11\3\0\5\11\6\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\4\11\2\0\2\11\1\0"+
    "\1\11\12\0\2\11\5\0\1\11\udddb\0\32\11\305\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\30\1\1\3\2\2\11\0\1\2"+
    "\1\4\43\0\1\2\12\0\1\2\2\0\1\1\1\0"+
    "\1\1\42\0\1\5\10\0\1\2\22\0\1\1\16\0"+
    "\1\2\41\0\1\2\37\0\1\2\27\0\1\2\21\0"+
    "\1\2\5\0\1\1\10\0\1\2\13\0\1\2\6\0"+
    "\1\2\5\0\1\2\4\0\1\2\4\0\1\2\3\0"+
    "\1\2\3\0\1\2\3\0\1\2\1\1\1\2\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[346];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\52\0\52\0\124\0\176\0\250\0\322\0\374"+
    "\0\u0126\0\u0150\0\u017a\0\u01a4\0\u01ce\0\u01f8\0\u0222\0\u024c"+
    "\0\u0276\0\u02a0\0\u02ca\0\u02f4\0\u031e\0\u0348\0\u0372\0\u039c"+
    "\0\u03c6\0\u03f0\0\u041a\0\u0444\0\u046e\0\52\0\52\0\u0498"+
    "\0\u04c2\0\u04ec\0\u0516\0\u0540\0\u056a\0\u0594\0\u05be\0\u05e8"+
    "\0\u0612\0\u063c\0\u0666\0\u01ce\0\u0690\0\u01f8\0\u06ba\0\u06e4"+
    "\0\u070e\0\u0738\0\u0762\0\u078c\0\u07b6\0\u07e0\0\u080a\0\u0834"+
    "\0\u085e\0\u0888\0\u08b2\0\u08dc\0\u0906\0\u0930\0\u095a\0\u0984"+
    "\0\u09ae\0\u09d8\0\u0a02\0\u0a2c\0\u0a56\0\u0a80\0\u0aaa\0\u0ad4"+
    "\0\u0afe\0\u0b28\0\u0b52\0\u0b7c\0\u0ba6\0\u0bd0\0\u0bfa\0\u0c24"+
    "\0\u0c4e\0\u0c78\0\u0ca2\0\u0ccc\0\u0cf6\0\u0d20\0\u0d4a\0\u0d74"+
    "\0\u0d9e\0\u0dc8\0\u0df2\0\u0e1c\0\u0e46\0\u0e70\0\u0e9a\0\u0ec4"+
    "\0\u0eee\0\u0f18\0\u0f42\0\u0f6c\0\u0f96\0\u0fc0\0\u0fea\0\u1014"+
    "\0\u103e\0\u1068\0\u1092\0\u10bc\0\u10e6\0\u1110\0\u113a\0\u1164"+
    "\0\u118e\0\u11b8\0\u11e2\0\u120c\0\u1236\0\u1260\0\u128a\0\u12b4"+
    "\0\u12de\0\u1308\0\u1332\0\u135c\0\u1386\0\u13b0\0\u13da\0\u1404"+
    "\0\u142e\0\52\0\u1458\0\u1482\0\u14ac\0\u14d6\0\u1500\0\u152a"+
    "\0\u1554\0\u157e\0\u15a8\0\u15d2\0\u15fc\0\u1626\0\u1650\0\u167a"+
    "\0\u16a4\0\u16ce\0\u16f8\0\u1722\0\u174c\0\u1776\0\u17a0\0\u17ca"+
    "\0\u17f4\0\u181e\0\u1848\0\u1872\0\u189c\0\u18c6\0\u18f0\0\u191a"+
    "\0\u1944\0\u196e\0\u1998\0\u19c2\0\u19ec\0\u1a16\0\u1a40\0\u1a6a"+
    "\0\u1a94\0\u1abe\0\u1ae8\0\u1b12\0\u1b3c\0\u1b66\0\u1b90\0\u1bba"+
    "\0\u1be4\0\u1c0e\0\u1c38\0\u1c62\0\u1c8c\0\u1cb6\0\u1ce0\0\u1d0a"+
    "\0\u1d34\0\u1d5e\0\u1d88\0\u1db2\0\u1ddc\0\u1e06\0\u1e30\0\u1e5a"+
    "\0\u1e84\0\u1eae\0\u1ed8\0\u1f02\0\u1f2c\0\u1f56\0\u1f80\0\u1faa"+
    "\0\u1fd4\0\u1ffe\0\u2028\0\u2052\0\u207c\0\u20a6\0\u20d0\0\u20fa"+
    "\0\u2124\0\u214e\0\u2178\0\u21a2\0\u21cc\0\u21f6\0\u2220\0\u224a"+
    "\0\u2274\0\u229e\0\u22c8\0\u22f2\0\u231c\0\u2346\0\u2370\0\u239a"+
    "\0\u23c4\0\u23ee\0\u2418\0\u2442\0\u246c\0\u2496\0\u24c0\0\u24ea"+
    "\0\u2514\0\u253e\0\u2568\0\u2592\0\u25bc\0\u25e6\0\u2610\0\u263a"+
    "\0\u2664\0\u268e\0\u26b8\0\u26e2\0\u270c\0\u2736\0\u2760\0\u278a"+
    "\0\u27b4\0\u27de\0\u2808\0\u2832\0\u285c\0\u2886\0\u28b0\0\u28da"+
    "\0\u2904\0\u292e\0\u2958\0\u2982\0\u29ac\0\u29d6\0\u2a00\0\u2a2a"+
    "\0\u2a54\0\u2a7e\0\u2aa8\0\u2ad2\0\u2afc\0\u2b26\0\u2b50\0\u2b7a"+
    "\0\u2ba4\0\u2bce\0\u2bf8\0\u2c22\0\u2c4c\0\u2c76\0\u2ca0\0\u2cca"+
    "\0\u2cf4\0\u2d1e\0\u2d48\0\u2d72\0\u2d9c\0\u2dc6\0\u2df0\0\u2e1a"+
    "\0\u2e44\0\u2e6e\0\u2e98\0\u2ec2\0\u2eec\0\u2f16\0\u2f40\0\u2f6a"+
    "\0\u2f94\0\u2fbe\0\u2fe8\0\u3012\0\u303c\0\u3066\0\u3090\0\u30ba"+
    "\0\u30e4\0\u310e\0\u3138\0\u3162\0\u318c\0\u31b6\0\u31e0\0\u320a"+
    "\0\u3234\0\u325e\0\u3288\0\u32b2\0\u32dc\0\u3306\0\u3330\0\u335a"+
    "\0\u3384\0\u33ae\0\u33d8\0\u3402\0\u342c\0\u3456\0\u3480\0\u34aa"+
    "\0\u34d4\0\u34fe\0\u3528\0\u3552\0\u357c\0\u35a6\0\u35d0\0\u35fa"+
    "\0\u3624\0\u364e\0\u3678\0\u36a2\0\u36cc\0\u36f6\0\u3720\0\u374a"+
    "\0\u3774\0\u379e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[346];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\2\3"+
    "\4\12\1\13\1\3\1\14\1\15\1\3\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\2\3\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\3\1\34\1\3"+
    "\1\35\3\3\1\36\53\0\2\4\1\0\2\37\1\40"+
    "\1\41\3\0\1\37\1\41\36\0\2\5\3\37\1\40"+
    "\1\41\2\0\2\37\1\41\61\0\1\42\30\0\1\43"+
    "\3\0\1\44\51\0\1\45\14\0\1\46\1\0\1\47"+
    "\1\50\3\0\1\51\17\0\2\40\60\0\4\52\53\0"+
    "\1\3\52\0\1\53\32\0\16\54\1\37\1\54\1\37"+
    "\1\55\30\54\16\56\1\37\2\56\1\57\1\37\27\56"+
    "\3\0\1\60\20\0\1\61\6\0\1\62\43\0\1\63"+
    "\52\0\1\64\6\0\1\65\1\0\1\66\3\0\1\67"+
    "\11\0\1\70\55\0\1\71\23\0\1\72\45\0\1\73"+
    "\51\0\1\74\14\0\1\75\40\0\1\76\21\0\1\77"+
    "\22\0\1\100\1\101\3\0\1\102\4\0\1\103\2\0"+
    "\1\104\32\0\1\105\2\0\1\106\50\0\1\107\51\0"+
    "\1\110\32\0\1\111\16\0\1\112\7\0\1\113\3\0"+
    "\1\114\53\0\1\115\45\0\1\116\12\0\2\40\1\0"+
    "\2\37\1\0\1\41\3\0\1\37\1\41\36\0\2\117"+
    "\5\0\1\120\6\0\1\120\102\0\1\121\34\0\1\122"+
    "\54\0\1\123\16\0\1\124\31\0\1\125\55\0\1\126"+
    "\46\0\1\127\46\0\1\130\61\0\1\131\17\0\4\132"+
    "\35\0\15\53\2\0\33\53\16\54\1\37\33\54\16\56"+
    "\1\37\33\56\33\0\1\133\43\0\1\134\10\0\1\135"+
    "\46\0\1\136\54\0\1\137\2\0\1\140\46\0\1\141"+
    "\16\0\1\60\34\0\1\142\37\0\1\143\65\0\1\144"+
    "\45\0\1\145\41\0\1\146\7\0\1\147\1\150\15\0"+
    "\1\151\74\0\1\152\4\0\1\153\23\0\1\154\53\0"+
    "\1\155\66\0\1\155\60\0\1\156\21\0\1\157\35\0"+
    "\1\160\17\0\1\161\67\0\1\162\14\0\1\163\35\0"+
    "\1\164\52\0\1\165\64\0\1\166\52\0\1\167\11\0"+
    "\1\170\23\0\1\171\61\0\1\172\15\0\1\173\32\0"+
    "\1\174\52\0\1\175\40\0\1\176\51\0\1\177\30\0"+
    "\1\200\53\0\1\201\43\0\2\117\1\0\2\37\5\0"+
    "\1\37\37\0\2\117\56\0\1\202\70\0\1\203\60\0"+
    "\1\204\23\0\1\205\25\0\1\206\40\0\1\207\62\0"+
    "\1\210\23\0\1\3\106\0\1\211\30\0\1\212\37\0"+
    "\4\213\60\0\1\3\54\0\1\214\54\0\1\215\23\0"+
    "\1\216\55\0\1\217\23\0\1\202\25\0\1\220\66\0"+
    "\1\221\53\0\1\222\52\0\1\171\31\0\1\223\51\0"+
    "\1\224\45\0\1\3\111\0\1\225\41\0\1\42\21\0"+
    "\1\226\73\0\1\227\67\0\1\230\15\0\1\231\67\0"+
    "\1\202\47\0\1\3\15\0\1\121\13\0\1\202\55\0"+
    "\1\202\26\0\1\202\41\0\1\232\50\0\1\173\66\0"+
    "\1\233\36\0\1\234\63\0\1\235\17\0\1\236\67\0"+
    "\1\237\67\0\1\240\43\0\1\241\40\0\1\242\34\0"+
    "\1\243\73\0\1\244\27\0\1\245\71\0\1\246\25\0"+
    "\1\247\74\0\1\205\52\0\1\121\60\0\1\3\53\0"+
    "\1\202\47\0\1\121\41\0\1\250\65\0\1\251\42\0"+
    "\1\252\47\0\1\253\23\0\1\254\57\0\4\255\64\0"+
    "\1\256\61\0\1\257\21\0\1\260\71\0\1\261\2\0"+
    "\1\262\46\0\1\227\55\0\1\263\45\0\1\3\51\0"+
    "\1\264\51\0\1\265\51\0\1\155\45\0\1\266\64\0"+
    "\1\202\57\0\1\267\34\0\1\267\60\0\1\270\37\0"+
    "\1\246\53\0\1\271\2\0\1\215\53\0\1\272\47\0"+
    "\1\273\7\0\1\274\45\0\1\275\23\0\1\276\102\0"+
    "\1\142\36\0\1\277\61\0\1\227\43\0\1\300\5\0"+
    "\1\301\1\302\57\0\1\303\43\0\1\304\16\0\1\305"+
    "\75\0\1\306\50\0\1\307\50\0\1\162\30\0\1\310"+
    "\1\311\16\0\1\312\2\0\1\300\6\0\1\313\1\314"+
    "\4\0\1\315\14\0\1\316\53\0\4\317\65\0\1\320"+
    "\47\0\1\321\51\0\1\322\62\0\1\323\21\0\1\222"+
    "\67\0\1\324\50\0\1\325\56\0\1\326\46\0\1\327"+
    "\54\0\1\330\27\0\1\331\77\0\1\332\43\0\1\202"+
    "\67\0\1\333\42\0\1\334\41\0\1\335\64\0\1\202"+
    "\42\0\1\202\52\0\1\336\51\0\1\337\42\0\1\340"+
    "\2\0\1\341\55\0\1\342\47\0\1\343\44\0\1\344"+
    "\34\0\1\345\45\0\1\346\111\0\1\347\34\0\1\350"+
    "\50\0\1\351\52\0\1\352\1\353\46\0\1\354\54\0"+
    "\1\355\53\0\1\356\31\0\4\357\66\0\1\360\47\0"+
    "\1\361\47\0\1\171\52\0\1\146\51\0\1\362\60\0"+
    "\1\3\52\0\1\313\1\314\4\0\1\315\42\0\1\363"+
    "\37\0\1\364\57\0\1\365\56\0\1\366\37\0\1\367"+
    "\53\0\1\370\61\0\1\371\16\0\1\121\73\0\1\372"+
    "\66\0\1\373\35\0\1\374\47\0\1\152\63\0\1\375"+
    "\40\0\1\203\55\0\1\376\25\0\1\377\71\0\1\u0100"+
    "\62\0\1\u0101\20\0\1\u0102\67\0\1\336\52\0\1\u0103"+
    "\34\0\1\u0104\75\0\1\u0105\62\0\1\u0106\16\0\4\u0107"+
    "\40\0\1\u0108\76\0\1\u0109\24\0\1\u010a\116\0\1\202"+
    "\31\0\1\202\25\0\1\310\1\311\16\0\1\312\2\0"+
    "\1\300\6\0\1\313\1\314\1\0\1\u010b\2\0\1\315"+
    "\14\0\1\u010c\100\0\1\u010d\55\0\1\u010e\16\0\1\u010f"+
    "\51\0\1\u0100\51\0\1\u0110\67\0\1\u0111\53\0\1\341"+
    "\57\0\1\u0112\23\0\1\325\77\0\1\u0113\42\0\1\u0114"+
    "\32\0\1\u0115\74\0\1\u0116\64\0\1\202\41\0\1\u0117"+
    "\43\0\1\u0118\33\0\4\u0119\63\0\1\u011a\47\0\1\u011b"+
    "\56\0\1\u011c\55\0\1\u011d\43\0\1\320\62\0\1\u011e"+
    "\55\0\1\u011f\36\0\1\u0120\51\0\1\u0121\61\0\1\u0122"+
    "\53\0\1\104\44\0\1\u0123\36\0\1\u0124\75\0\1\202"+
    "\34\0\1\u0125\26\0\1\u0126\51\0\1\u0127\53\0\4\u0128"+
    "\64\0\1\u0129\47\0\1\u012a\61\0\1\u012b\54\0\1\u012c"+
    "\42\0\1\u012d\51\0\1\273\56\0\1\u012e\61\0\1\u012f"+
    "\31\0\1\u0100\47\0\1\u0130\53\0\1\u0131\32\0\1\272"+
    "\47\0\1\u0132\101\0\1\u0133\25\0\4\u0134\67\0\1\u0135"+
    "\51\0\1\3\57\0\1\u0136\20\0\1\u0137\100\0\1\u0138"+
    "\41\0\1\352\56\0\1\u0139\51\0\1\155\57\0\1\121"+
    "\53\0\1\201\32\0\1\u013a\36\0\4\u013b\44\0\1\u013c"+
    "\70\0\1\u013d\65\0\1\u013e\33\0\1\u013f\52\0\1\121"+
    "\65\0\1\u0140\21\0\4\u0141\66\0\1\u0142\47\0\1\u0143"+
    "\50\0\1\202\65\0\1\u0144\33\0\1\u0145\36\0\4\u0146"+
    "\70\0\1\u0147\44\0\1\u0148\32\0\1\u0149\75\0\1\u014a"+
    "\27\0\4\u014b\60\0\1\u014c\63\0\1\u014d\45\0\1\u014e"+
    "\45\0\1\3\35\0\4\u014f\71\0\1\u0150\53\0\1\u0151"+
    "\61\0\1\u0152\14\0\4\u0153\44\0\1\u0154\51\0\1\u0155"+
    "\75\0\1\u0156\27\0\4\u0157\72\0\1\203\43\0\1\u0158"+
    "\47\0\1\127\35\0\4\u0159\66\0\1\u015a\31\0\4\37"+
    "\40\0\1\u0108\33\0\1\257\12\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14280];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\10\1\11\32\1\2\11\1\1\11\0\2\1"+
    "\43\0\1\1\12\0\1\1\2\0\1\1\1\0\1\1"+
    "\42\0\1\11\10\0\1\1\22\0\1\1\16\0\1\1"+
    "\41\0\1\1\37\0\1\1\27\0\1\1\21\0\1\1"+
    "\5\0\1\1\10\0\1\1\13\0\1\1\6\0\1\1"+
    "\5\0\1\1\4\0\1\1\4\0\1\1\3\0\1\1"+
    "\3\0\1\1\3\0\3\1\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[346];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */

	/* styles */
	
	public static final	byte PLAIN_STYLE = 1;
	public static final byte KEYWORD_STYLE = 2;
	public static final byte DATA_STYLE = 3;
	public static final byte OPERATOR_STYLE = 4;
	public static final byte LITERAL_STYLE = 5;
	public static final byte COMMENT_STYLE = 6;
		
	private Map attsMap = new HashMap();


	public Style getStyleForType(byte type)
	{
		return (Style)attsMap.get(new Byte(type));
	}

	
	public int getStart()
	{
		return yychar;
	}
	
	public SqlLexer()
	{
			
  	Style keyword = new StyleImpl("keyword");
  	StyleConstants.setBold(keyword, true);
  	StyleConstants.setForeground(keyword, new Color(127,0,85));
  	
  		
  	Style operator = new StyleImpl("operator");
  	StyleConstants.setBold(operator, true);
  	StyleConstants.setForeground(operator, Color.BLACK);
  	
  	Style comment = new StyleImpl("comment");
  	StyleConstants.setForeground(comment, Color.BLUE);
  	
  	Style plain = new StyleImpl("plain");
  	StyleConstants.setForeground(plain, Color.BLACK);
  	
  	Style data = new StyleImpl("data");
  	StyleConstants.setForeground(plain, Color.BLACK);
  	
  	Style literal = new StyleImpl("literal");
  	StyleConstants.setForeground(literal , new Color(139,121,94));
  	
  	attsMap.put(new Byte(PLAIN_STYLE) , plain);
  	attsMap.put(new Byte(KEYWORD_STYLE) , keyword);
  	attsMap.put(new Byte(DATA_STYLE) , data);
  	attsMap.put(new Byte(OPERATOR_STYLE) , operator);
  	attsMap.put(new Byte(LITERAL_STYLE) , literal);
  	attsMap.put(new Byte(COMMENT_STYLE) , comment);
	}
	
	


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public SqlLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public SqlLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1676) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public byte yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 3: 
          { return OPERATOR_STYLE;
          }
        case 6: break;
        case 1: 
          { return DATA_STYLE;
          }
        case 7: break;
        case 4: 
          { return COMMENT_STYLE;
          }
        case 8: break;
        case 5: 
          { return KEYWORD_STYLE;
          }
        case 9: break;
        case 2: 
          { return LITERAL_STYLE;
          }
        case 10: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
